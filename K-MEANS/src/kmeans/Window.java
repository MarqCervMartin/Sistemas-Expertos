/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kmeans;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.colorchooser.AbstractColorChooserPanel;
import javax.swing.plaf.ComponentUI;

/**
 *
 * @author martin
 */
public class Window extends javax.swing.JFrame {
     KMeans objectKM = new KMeans();
     int countAtractores=1;
    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextPuntos = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextAtractores = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jButtonGenerate = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("# Puntos:");

        jLabel2.setText("# Atractores:");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 0)));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 622, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jButtonGenerate.setText("Generar");
        jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateActionPerformed(evt);
            }
        });

        jButton1.setText("Clasificar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(41, 41, 41))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(16, 16, 16)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextAtractores, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                            .addComponent(jTextPuntos)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButtonGenerate)
                            .addComponent(jButton2))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextPuntos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextAtractores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(jButtonGenerate)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(283, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateActionPerformed
        // TODO add your handling code here:
        int NumPuntos, NumAtractores;
        NumPuntos = Integer.parseInt( jTextPuntos.getText());
        NumAtractores = Integer.parseInt(jTextAtractores.getText());
        //---------------->Validaciones
        if(jTextPuntos.getText().isEmpty()){
            JOptionPane.showMessageDialog( null ,"Ingresa numero de puntos", "K-Means",JOptionPane.WARNING_MESSAGE);
            return;
        }else{
            if(NumPuntos <= 0){
                JOptionPane.showMessageDialog( null ,"Ingresa numero de puntos positivos", "K-Means",JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        if(jTextAtractores.getText().isEmpty()){
                JOptionPane.showMessageDialog( null ,"Ingresa atractores", "K-Means",JOptionPane.WARNING_MESSAGE);
                return;
        }else{
            if(NumAtractores <= 0){
                JOptionPane.showMessageDialog( null ,"Ingresa numero de atractores positivos", "K-Means",JOptionPane.WARNING_MESSAGE);
                return;
            }else{
                if(NumAtractores > 7){
                    JOptionPane.showMessageDialog( null ,"Ingresa numero de atractores menor a 7", "K-Means",JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
        }
        //le mandamos numero de puntos
        objectKM.setnPoints(NumPuntos);
        //le mandamos numero de atractores
        objectKM.setnAtractores(NumAtractores);
        //Agregamos N pares ordenados con un array de objetos.
        objectKM.generarPuntos();
        dibujarClases();
    }//GEN-LAST:event_jButtonGenerateActionPerformed
    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        // TODO add your handling code here:
        //System.out.println(countAtractores++);
        if(objectKM.getnAtractores() >= countAtractores){
            //lienzo con graphics
            Graphics g = jPanel1.getGraphics();
            switch(countAtractores){
                case 1:
                    //System.out.println(countAtractores);
                    g.setColor(Color.GREEN);//establecemos el color
                    break;
                case 2:
                    //System.out.println(countAtractores);
                    g.setColor(Color.BLUE);//establecemos el color
                    break;
                case 3:
                    //System.out.println(countAtractores);
                    g.setColor(Color.YELLOW);//establecemos el color
                    break;
                case 4:
                    //System.out.println(countAtractores);
                    g.setColor(Color.MAGENTA);//establecemos el color
                    break;
                case 5:
                    //System.out.println(countAtractores);
                    g.setColor(Color.CYAN);//establecemos el color
                    break;
                case 6:
                    //System.out.println(countAtractores);
                    g.setColor(Color.GRAY);//establecemos el color
                    break;
                case 7:
                    //System.out.println(countAtractores);
                    g.setColor(Color.PINK);//establecemos el color
                    break;
            }
            
            //seleccionar color
            //JColorChooser chooser = new JColorChooser();
            //guardamos ese color
            //Color col = chooser.showDialog(null,  "Clase "+ countAtractores, Color.GREEN);
            //Color col = chooser.showDialog(null, "Clase", Color.GREEN);
            //g.setColor(col);//establecemos el color
            g.fillOval(evt.getX(), evt.getY(), 10, 10);//pintamos el punto
            objectKM.añadirAtractor(evt.getX(), evt.getY(), g.getColor(), countAtractores-1);//añadimos al array un atractor
            countAtractores++;//contador de atractores
            System.out.println("Atractor Array: "+objectKM.getAtractores());
            //System.out.println("Tamaño atractores lista:"+objectKM.getAtractores().size());
        }
        
    }//GEN-LAST:event_jPanel1MousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(countAtractores > objectKM.getnAtractores()){
            //System.out.println("OK");
            //crear un array auxiliar del array anterior para saber si no hay cambios
            /*
            ArrayList<Coordenadas> a = new ArrayList<>();
            a = (ArrayList)objectKM.getAtractores();
            System.out.println("Array 2: "+a);
            */
            
            //Primero asignamos clases
            /*
            int min = -1;
            java.awt.Graphics g = jPanel1.getGraphics();
            float aux=0;
            for(Coordenadas puntos:objectKM.getClases()){
                for(Coordenadas atractores: objectKM.getAtractores()){
                    objectKM.getArrayDistancias().add(objectKM.euclidiana(puntos.getX(), puntos.getY(), atractores.getX(), atractores.getY()));
                }
                //System.out.println(objectKM.getArrayDistancias());
                aux = Collections.min(objectKM.getArrayDistancias());
                min = objectKM.getArrayDistancias().indexOf(aux); 
                //asignamos clase al punto
                puntos.setnC(min);
                puntos.setC(objectKM.getAtractores().get(min).getC());
                g.setColor(puntos.getC());
                g.fillOval(puntos.getX(), puntos.getY(), 5, 5);
                System.out.println(puntos);
                objectKM.getArrayDistancias().clear();
                
            }*/
            
            asignarClase();
            //calculamos centroides
            calcularCentroides();
            /*
            do{
                objectKM.distancias();
                objectKM.centroides();
            }while(1==1);
            */
        }else{
            JOptionPane.showMessageDialog( null ,"Completa los atractores", "K-Means",JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jPanel1.repaint();
        objectKM.clear();
        countAtractores = 1;
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextAtractores;
    private javax.swing.JTextField jTextPuntos;
    // End of variables declaration//GEN-END:variables

    private void dibujarClases() {
        java.awt.Graphics g = jPanel1.getGraphics();
        g.setColor(Color.BLACK);
        for(Coordenadas par:objectKM.getClases()){
            System.out.println(par.toString());
            g.fillOval(par.getX(), par.getY(), 5, 5);
        }
    }
    
    public void asignarClase(){
        int min = -1;
        java.awt.Graphics g = jPanel1.getGraphics();
        float aux=0;//obtener el valor minimo de las distancias
        for(Coordenadas puntos:objectKM.getClases()){
            for(Coordenadas atractores: objectKM.getAtractores()){
                objectKM.getArrayDistancias().add(objectKM.euclidiana(puntos.getX(), puntos.getY(), atractores.getX(), atractores.getY()));
            }
            //System.out.println(objectKM.getArrayDistancias());
            aux = Collections.min(objectKM.getArrayDistancias());
            min = objectKM.getArrayDistancias().indexOf(aux); 
            //asignamos clase al punto
            puntos.setnC(min);
            puntos.setC(objectKM.getAtractores().get(min).getC());
            g.setColor(puntos.getC());
            g.fillOval(puntos.getX(), puntos.getY(), 5, 5);
            System.out.println(puntos);
            objectKM.getArrayDistancias().clear();
                
        }
    }
    
    public void calcularCentroides(){
        ArrayList<Coordenadas> centroides = new ArrayList<>();
        centroides = (ArrayList)objectKM.getAtractores();
        //System.out.println("Array 2: "+centroides);
        int arrayContadores[] = new int[centroides.size()];//contadores de numero de clases
        //inicializamos nuestros centroides en cordenadas X y Y, junto con los contadores en cero
        for(int i=0;i<centroides.size();i++){
            centroides.get(i).setX(0);
            centroides.get(i).setY(0);
            //centroide.setnC(0);
            arrayContadores[i] = 0;
        }//System.out.println("Centroides: "+centroides);
        int acumulador = 0;
        
        //ArrayList<Integer> nClases = new ArrayList<>();
        
        
        int nClases = 0;
        //recorremos todas las clases y comprobamos si tienen la misma clase, si lo tienen
        //se suma un uno a el array de contadores
        for(Coordenadas puntos:objectKM.getClases()){
            for(int i=0; i< centroides.size();i++){
                System.out.println("punto : "+puntos.getnC()+" atractor: "+centroides.get(i).getnC());
                if(puntos.getnC() == centroides.get(i).getnC()){
                    acumulador = centroides.get(i).getX()+puntos.getX();
                    centroides.get(i).setX(acumulador);
                    acumulador = 0;
                    acumulador = centroides.get(i).getY()+puntos.getY();
                    centroides.get(i).setY(acumulador);
                    arrayContadores[i] = arrayContadores[i]+1;
                }
            }
        }
        System.out.println(centroides);
        System.out.println("\n");
        for(int j = 0;j<centroides.size();j++){
            System.out.print(arrayContadores[j]+" ");
        }
        objectKM.setCentroides(centroides);
    }
    
}
